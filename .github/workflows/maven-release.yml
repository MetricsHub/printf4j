# This workflow releases the project on Maven Central
# and prepare a new development version

name: Release

on:
  #push:
  #  branches: [ main ]
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: "Release version"
        required: true
        default: ""
      developmentVersion:
        description: "New SNAPSHOT version"
        required: true
        default: ""
      autoRelease:
        description: "Release staging repository immediately?"
        required: true
        type: boolean
        default: false

jobs:
  release:
    name: Release ${{ github.event.inputs.releaseVersion }}
    
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    
    - uses: actions/checkout@v4
    
    - name: Set up JDK with Maven Central Repository
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        java-package: 'jdk'
        cache: 'maven'
        server-id: ossrh
        server-username: OSSRH_USERNAME
        server-password: OSSRH_TOKEN
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Configure Git User
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"
    
    - name: Set release branch and tag name
      run: |
        echo "branchName=release/v$INPUT_RELEASEVERSION" >> $GITHUB_ENV
        echo "tagName=v$INPUT_RELEASEVERSION" >> $GITHUB_ENV
      env:
        INPUT_RELEASEVERSION: ${{ github.event.inputs.releaseVersion }}

    - name: Create ${{ env.branchName }} branch
      run: |
        git checkout ${{ env.branchName }} 2>/dev/null || git checkout -b ${{ env.branchName }}
        git push origin ${{ env.branchName }}

    - name: Clean up existing ${{ env.tagName }} tags
      run: |
        git tag -d ${{ env.tagName }} || true
        git push origin :refs/tags/${{ env.tagName }} || true

    - name: Prepare release with Maven
      id: prepare
      run: |
        mvn -B -U \
          -Prelease \
          release:clean \
          release:prepare \
          -Dgpg.passphraseServerId=gpg.passphrase \
          -Darguments=-Dgpg.passphraseServerId=gpg.passphrase \
          -DreleaseVersion=${{ github.event.inputs.releaseVersion }} \
          -DdevelopmentVersion=${{ github.event.inputs.developmentVersion }} \
          -Dresume=false
      env:
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}

    - name: Release With Maven
      id: release
      run: |
        mvn -B -U \
          -Prelease \
          release:perform \
          -Dgpg.passphraseServerId=gpg.passphrase \
          -Darguments=-Dgpg.passphraseServerId=gpg.passphrase \
          -DreleaseVersion=${{ github.event.inputs.releaseVersion }} \
          -DdevelopmentVersion=${{ github.event.inputs.developmentVersion }} \
          deploy
      env:
        AUTO_RELEASE_AFTER_CLOSE: ${{ github.event.inputs.autoRelease }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}

    - name: Release rollback on failure
      run: |
        mvn -B -U \
          -Prelease \
          release:rollback \
      if: always() && (steps.prepare.outcome == 'failure' || steps.release.outcome == 'failure')

    - name: Summary with staging repositories and buildinfo
      id: stagingList
      run: |
        echo "# Staging Repositories" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        mvn -B -U \
          -Prelease \
          org.sonatype.plugins:nexus-staging-maven-plugin:rc-list >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "# Buildinfo" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat target/*.buildinfo >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      env:
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}

    - name: Create Pull Request
      run: |
        ACCESS_TOKEN=${{ github.token }}
        BASE_BRANCH=${{ github.event.repository.default_branch }}
        HEAD_BRANCH=${{ env.branchName }}
        PR_TITLE="Release v${{ github.event.inputs.releaseVersion }} and prepare v${{ github.event.inputs.developmentVersion }}"
        PR_BODY="Automated release \
          - Release v${{ github.event.inputs.releaseVersion }} \
          - Prepare v${{ github.event.inputs.developmentVersion }}"
 
        curl -X POST \
          -H "Authorization: token $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{\"title\":\"$PR_TITLE\",\"body\":\"$PR_BODY\",\"head\":\"$HEAD_BRANCH\",\"base\":\"$BASE_BRANCH\"}" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls"
