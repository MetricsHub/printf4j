# This workflow releases the project on Maven Central
# and prepare a new development version

name: Release

on:
  #push:
  #  branches: [ main ]
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: "Release version"
        required: true
        default: ""
      developmentVersion:
        description: "New version in development (with SNAPSHOT)"
        required: true
        default: ""
      autoRelease:
        description: "Automatic release from staging repository?"
        required: true
        type: boolean
        default: false

jobs:
  build:
    
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK with Maven Central Repository
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        java-package: 'jdk'
        cache: 'maven'
        server-id: ossrh
        server-username: ${{ secrets.OSSRH_USERNAME }}
        server-password: OSSRH_TOKEN
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
    - name: Configure Git User
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"
    - name: Create release branch
      run: |
        git checkout release/${{ github.event.inputs.releaseVersion }} 2>/dev/null || git checkout -b release/${{ github.event.inputs.releaseVersion }}
    - name: Clean up existing release tags
      run: |
        git tag -d v${{ github.event.inputs.releaseVersion }} || true
        git push origin :refs/tags/v${{ github.event.inputs.releaseVersion }} || true
    - name: Prepare release with Maven
      id: prepare
      run: |
        mvn -B -U \
          -Prelease \
          release:clean \
          release:prepare \
          -Dgpg.passphraseServerId=gpg.passphrase \
          -Darguments=-Dgpg.passphraseServerId=gpg.passphrase \
          -DreleaseVersion=${{ github.event.inputs.releaseVersion }} \
          -DdevelopmentVersion=${{ github.event.inputs.developmentVersion }} \
          -Dresume=false
      env:
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
    - name: Release With Maven
      id: release
      run: |
        mvn -B -U \
          -Prelease \
          release:perform \
          -Dgpg.passphraseServerId=gpg.passphrase \
          -Darguments=-Dgpg.passphraseServerId=gpg.passphrase \
          -DreleaseVersion=${{ github.event.inputs.releaseVersion }} \
          -DdevelopmentVersion=${{ github.event.inputs.developmentVersion }} \
          deploy
      env:
        AUTO_RELEASE_AFTER_CLOSE: ${{ github.event.inputs.autoRelease }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
    - name: Release rollback because prepation failed
      run: |
        mvn -B -U \
          -Prelease \
          release:rollback \
      if: always() && (steps.prepare.outcome == 'failure' || steps.release.outcome == 'failure')
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        title: Release v${{ github.event.inputs.releaseVersion }} and prepare v${{ github.event.inputs.developmentVersion }}
        body: |
          Automated release
          - Release v${{ github.event.inputs.releaseVersion }} 
          - Prepare v${{ github.event.inputs.developmentVersion }}
